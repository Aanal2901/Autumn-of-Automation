# -*- coding: utf-8 -*-
"""intermediate

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g0jL1SMc8DksMzgcF5fjAMrVS-K6qi3G
"""

# Commented out IPython magic to ensure Python compatibility.
import cv2
from google.colab import drive
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array

from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelBinarizer
from tensorflow.keras.utils import to_categorical
import os
from imutils import paths
import numpy as np
import argparse
drive.mount('/content/drive')
# %cd '/content/drive/My Drive/Intermediate_Assignment_Dataset'

alpha = 1e-4
epochs = 30
bs = 50

ap = argparse.ArgumentParser()

ap.add_argument("-d", "--dataset", required = True, help = "path to dataset")
#ap.add_argument("-p", "--plot", type = str, default = "plot.png", help = "plot to loss")
#ap.add_argument("-m", "--model", type = str, default = "specs_detector", help = "to detect sunglasses")
arg = vars(ap.parse_args())

label = []
data = []
i=0
for i in range(0, 311):
  for file in os.listdir('/content/drive/My Drive/Intermediate_Assignment_Dataset'):
    img = cv2.imread(file)
    img = img_to_array(img)
    img = preprocess_input(img)
    if (file == 'NoSunglasses{}.pgm'.format(i)):
      label.append(0)
      data.append(img)
      #print(file, 0)    
    if (file == 'YesSunglasses{}.pgm'.format(i)):
      label.append(1)
      data.append(img)

lb = LabelBinarizer()
labels = lb.fit_transform(label)
labels = to_categorical(label)
(train_X, train_Y, test_X, test_Y) = train_test_split(data, labels, test_size = 0.25, stratify = labels, random_state = 40)

baseModel = MobileNetV2(weights = 'imagenet', include_top=False, input_tensor=Input(shape= (224, 224, 3,)))
headModel = baseModel.output
headModel = AveragePooling2D(pool_size=(5,5))(headModel)
headModel = Flatten(name = 'flatten')(headModel)
headModel = Dense(128, activation = 'relu')(headModel)
headModel = Dropout(0.4)(headModel)
headModel = Dense(2, activation = 'softmax')(headModel)

model = Model(inputs = baseModel.input, outputs = headModel)

for layer in baseModel.layers:
  layer.trainable = False

opt = Adam(learning_rate=alpha, decay = alpha/epochs)
model.compile(optimizer = opt, metrics=['accuracy'], loss = "binary_crossentropy")
H = model.fit(x = train_X, y=train_Y, batch_size=bs, epochs = epochs, validation_data=(test_X, test_Y), validation_steps=len(test_X)/epochs, steps_per_epoch=len(train_X)/epochs)

preIdxs = model.predict(x = test_X, batch_size=bs)
preIdxs = np.argmax(preIdxs, axis = 1)
N = epochs
plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0, N), H.history["loss"], label="train_loss")
plt.plot(np.arange(0, N), H.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, N), H.history["accuracy"], label="train_acc")
plt.plot(np.arange(0, N), H.history["val_accuracy"], label="val_acc")
plt.title("Training Loss and Accuracy")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend(loc="lower left")